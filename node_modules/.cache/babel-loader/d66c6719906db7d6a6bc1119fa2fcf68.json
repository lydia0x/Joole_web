{"ast":null,"code":"import axios from 'axios';\nimport * as actionTypes from './actionTypes'; // export const userPostFetch = user => {\n//     return dispatch => {\n//         return fetch(\"http://localhost:8080/register\", {\n//             method: \"POST\",\n//             headers: {\n//                 'Content-Type': 'application/json',\n//                 Accept: 'application/json',\n//             },\n//             body: JSON.stringify({ user })\n//         })\n//             .then(resp => resp.json())\n//             .then(data => {\n//                 if (data.message) {\n//                 } else {\n//                     localStorage.setItem(\"token\", data.jwt)\n//                     dispatch(loginUser(data.user))\n//                 }\n//             })\n//     }\n// }\n\nexport const authStart = () => {\n  return {\n    type: actionTypes.AUTH_START\n  };\n};\nexport const authSuccess = (token, userId) => {\n  return {\n    type: actionTypes.AUTH_SUCCESS,\n    idToken: token,\n    userId: userId\n  };\n};\nexport const authFail = error => {\n  return {\n    type: actionTypes.AUTH_FAIL,\n    error: error\n  };\n};\nexport const logout = () => {\n  localStorage.removeItem('token');\n  localStorage.removeItem('expirationDate');\n  localStorage.removeItem('userId');\n  return {\n    type: actionTypes.AUTH_LOGOUT\n  };\n};\nexport const checkAuthTimeout = expirationTime => {\n  return dispatch => {\n    setTimeout(() => {\n      dispatch(logout());\n    }, expirationTime * 1000);\n  };\n};\nexport const auth = (username, password, isSignup) => {\n  return dispatch => {\n    dispatch(authStart());\n    const authData = {\n      username: username,\n      password: password,\n      returnSecureToken: true\n    };\n    let url = 'http://localhost:8080/register';\n    axios.post(url, authData).then(response => {\n      console.log(response);\n      const expirationDate = new Date(new Date().getTime() + response.data.expiresIn * 1000);\n      localStorage.setItem('token', response.data.idToken);\n      localStorage.setItem('expirationDate', expirationDate);\n      localStorage.setItem('userId', response.data.localId);\n      dispatch(authSuccess(response.data.idToken, response.data.localId));\n      dispatch(checkAuthTimeout(response.data.expiresIn));\n    }).catch(err => {\n      dispatch(authFail(err.response.data.error));\n    });\n  };\n};\nexport const authCheckState = () => {\n  return dispatch => {\n    const token = localStorage.getItem('token');\n\n    if (!token) {\n      dispatch(logout());\n    } else {\n      const expirationDate = new Date(localStorage.getItem('expirationDate'));\n\n      if (expirationDate <= new Date()) {\n        dispatch(logout());\n      } else {\n        const userId = localStorage.getItem('userId');\n        dispatch(authSuccess(token, userId));\n        dispatch(checkAuthTimeout((expirationDate.getTime() - new Date().getTime()) / 1000));\n      }\n    }\n  };\n};\nexport const userLoginFetch = user => {\n  return dispatch => {\n    return fetch(\"http://localhost:8080/login\", {\n      method: \"POST\",\n      headers: {\n        'Content-Type': 'application/json',\n        Accept: 'application/json'\n      },\n      body: JSON.stringify({\n        user\n      })\n    }).then(resp => resp.json()).then(data => {\n      if (data.message) {// Here you should have logic to handle invalid login credentials.\n        // This assumes your Rails API will return a JSON object with a key of\n        // 'message' if there is an error\n      } else {\n        localStorage.setItem(\"token\", data.jwt);\n        dispatch(loginUser(data.user));\n      }\n    });\n  };\n};\nexport const getProfileFetch = () => {\n  return dispatch => {\n    const token = localStorage.token;\n\n    if (token) {\n      return fetch(\"http://localhost:8080/home\", {\n        method: \"GET\",\n        headers: {\n          'Content-Type': 'application/json',\n          Accept: 'application/json',\n          'Authorization': `Bearer ${token}`\n        }\n      }).then(resp => resp.json()).then(data => {\n        if (data.message) {\n          // An error will occur if the token is invalid.\n          // If this happens, you may want to remove the invalid token.\n          localStorage.removeItem(\"token\");\n        } else {\n          dispatch(loginUser(data.user));\n        }\n      });\n    }\n  };\n};","map":{"version":3,"sources":["/Users/apple/Desktop/JavaCloudApplication/Joole_web/src/actions/auth.js"],"names":["axios","actionTypes","authStart","type","AUTH_START","authSuccess","token","userId","AUTH_SUCCESS","idToken","authFail","error","AUTH_FAIL","logout","localStorage","removeItem","AUTH_LOGOUT","checkAuthTimeout","expirationTime","dispatch","setTimeout","auth","username","password","isSignup","authData","returnSecureToken","url","post","then","response","console","log","expirationDate","Date","getTime","data","expiresIn","setItem","localId","catch","err","authCheckState","getItem","userLoginFetch","user","fetch","method","headers","Accept","body","JSON","stringify","resp","json","message","jwt","loginUser","getProfileFetch"],"mappings":"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","sourcesContent":["import axios from 'axios';\n\nimport * as actionTypes from './actionTypes';\n\n// export const userPostFetch = user => {\n//     return dispatch => {\n//         return fetch(\"http://localhost:8080/register\", {\n//             method: \"POST\",\n//             headers: {\n//                 'Content-Type': 'application/json',\n//                 Accept: 'application/json',\n//             },\n//             body: JSON.stringify({ user })\n//         })\n//             .then(resp => resp.json())\n//             .then(data => {\n//                 if (data.message) {\n//                 } else {\n//                     localStorage.setItem(\"token\", data.jwt)\n//                     dispatch(loginUser(data.user))\n//                 }\n//             })\n//     }\n// }\n\nexport const authStart = () => {\n    return {\n        type: actionTypes.AUTH_START\n    };\n};\n\nexport const authSuccess = (token, userId) => {\n    return {\n        type: actionTypes.AUTH_SUCCESS,\n        idToken: token,\n        userId: userId\n    };\n};\n\nexport const authFail = (error) => {\n    return {\n        type: actionTypes.AUTH_FAIL,\n        error: error\n    };\n};\n\nexport const logout = () => {\n    localStorage.removeItem('token');\n    localStorage.removeItem('expirationDate');\n    localStorage.removeItem('userId');\n    return {\n        type: actionTypes.AUTH_LOGOUT\n    };\n};\n\nexport const checkAuthTimeout = (expirationTime) => {\n    return dispatch => {\n        setTimeout(() => {\n            dispatch(logout());\n        }, expirationTime * 1000);\n    };\n};\n\nexport const auth = (username, password, isSignup) => {\n    return dispatch => {\n        dispatch(authStart());\n        const authData = {\n            username: username,\n            password: password,\n            returnSecureToken: true\n        };\n        let url = 'http://localhost:8080/register';\n        axios.post(url, authData)\n            .then(response => {\n                console.log(response);\n                const expirationDate = new Date(new Date().getTime() + response.data.expiresIn * 1000);\n                localStorage.setItem('token', response.data.idToken);\n                localStorage.setItem('expirationDate', expirationDate);\n                localStorage.setItem('userId', response.data.localId);\n                dispatch(authSuccess(response.data.idToken, response.data.localId));\n                dispatch(checkAuthTimeout(response.data.expiresIn));\n            })\n            .catch(err => {\n                dispatch(authFail(err.response.data.error));\n            });\n    };\n};\n\n\nexport const authCheckState = () => {\n    return dispatch => {\n        const token = localStorage.getItem('token');\n        if (!token) {\n            dispatch(logout());\n        } else {\n            const expirationDate = new Date(localStorage.getItem('expirationDate'));\n            if (expirationDate <= new Date()) {\n                dispatch(logout());\n            } else {\n                const userId = localStorage.getItem('userId');\n                dispatch(authSuccess(token, userId));\n                dispatch(checkAuthTimeout((expirationDate.getTime() - new Date().getTime()) / 1000 ));\n            }   \n        }\n    };\n};\n\nexport const userLoginFetch = user => {\n    return dispatch => {\n      return fetch(\"http://localhost:8080/login\", {\n        method: \"POST\",\n        headers: {\n          'Content-Type': 'application/json',\n          Accept: 'application/json',\n        },\n        body: JSON.stringify({user})\n      })\n        .then(resp => resp.json())\n        .then(data => {\n          if (data.message) {\n            // Here you should have logic to handle invalid login credentials.\n            // This assumes your Rails API will return a JSON object with a key of\n            // 'message' if there is an error\n          } else {\n            localStorage.setItem(\"token\", data.jwt)\n            dispatch(loginUser(data.user))\n          }\n        })\n    }\n  }\n\n  export const getProfileFetch = () => {\n    return dispatch => {\n      const token = localStorage.token;\n      if (token) {\n        return fetch(\"http://localhost:8080/home\", {\n          method: \"GET\",\n          headers: {\n            'Content-Type': 'application/json',\n            Accept: 'application/json',\n            'Authorization': `Bearer ${token}`\n          }\n        })\n          .then(resp => resp.json())\n          .then(data => {\n            if (data.message) {\n              // An error will occur if the token is invalid.\n              // If this happens, you may want to remove the invalid token.\n              localStorage.removeItem(\"token\")\n            } else {\n              dispatch(loginUser(data.user))\n            }\n          })\n      }\n    }\n  }\n  "]},"metadata":{},"sourceType":"module"}