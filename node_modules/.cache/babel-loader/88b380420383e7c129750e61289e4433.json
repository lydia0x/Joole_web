{"ast":null,"code":"import axios from 'axios';\nimport * as actionTypes from './actionTypes';\nexport const userPostFetch = user => {\n  return dispatch => {\n    return fetch(\"http://localhost:8080/register\", {\n      method: \"POST\",\n      headers: {\n        'Content-Type': 'application/json',\n        Accept: 'application/json'\n      },\n      body: JSON.stringify({\n        user\n      })\n    }).then(resp => resp.json()).then(data => {\n      if (data.message) {} else {\n        localStorage.setItem(\"token\", data.jwt);\n        dispatch(loginUser(data.user));\n      }\n    });\n  };\n};\nexport const authStart = () => {\n  return {\n    type: actionTypes.AUTH_START\n  };\n};\nexport const authSuccess = (token, userId) => {\n  return {\n    type: actionTypes.AUTH_SUCCESS,\n    idToken: token,\n    userId: userId\n  };\n};\nexport const authFail = error => {\n  return {\n    type: actionTypes.AUTH_FAIL,\n    error: error\n  };\n};\nexport const logout = () => {\n  localStorage.removeItem('token');\n  localStorage.removeItem('expirationDate');\n  localStorage.removeItem('userId');\n  return {\n    type: actionTypes.AUTH_LOGOUT\n  };\n};\nexport const checkAuthTimeout = expirationTime => {\n  return dispatch => {\n    setTimeout(() => {\n      dispatch(logout());\n    }, expirationTime * 1000);\n  };\n};\nexport const auth = (username, password, isSignup) => {\n  return dispatch => {\n    dispatch(authStart());\n    const authData = {\n      username: username,\n      password: password,\n      returnSecureToken: true\n    };\n    let url = 'http://localhost:8080/authenticate';\n    axios.post(url, authData).then(response => {\n      console.log(response);\n      const expirationDate = new Date(new Date().getTime() + response.data.expiresIn * 1000);\n      localStorage.setItem('token', response.data.idToken);\n      localStorage.setItem('expirationDate', expirationDate);\n      localStorage.setItem('userId', response.data.localId);\n      dispatch(authSuccess(response.data.idToken, response.data.localId));\n      dispatch(checkAuthTimeout(response.data.expiresIn));\n    }).catch(err => {\n      dispatch(authFail(err.response.data.error));\n    });\n  };\n};\nexport const authCheckState = () => {\n  return dispatch => {\n    const token = localStorage.getItem('token');\n\n    if (!token) {\n      dispatch(logout());\n    } else {\n      const expirationDate = new Date(localStorage.getItem('expirationDate'));\n\n      if (expirationDate <= new Date()) {\n        dispatch(logout());\n      } else {\n        const userId = localStorage.getItem('userId');\n        dispatch(authSuccess(token, userId));\n        dispatch(checkAuthTimeout((expirationDate.getTime() - new Date().getTime()) / 1000));\n      }\n    }\n  };\n};\nexport const userLoginFetch = user => {\n  return dispatch => {\n    return fetch(\"http://localhost:8080/login\", {\n      method: \"POST\",\n      headers: {\n        'Content-Type': 'application/json',\n        Accept: 'application/json'\n      },\n      body: JSON.stringify({\n        user\n      })\n    }).then(resp => resp.json()).then(data => {\n      if (data.message) {// Here you should have logic to handle invalid login credentials.\n        // This assumes your Rails API will return a JSON object with a key of\n        // 'message' if there is an error\n      } else {\n        localStorage.setItem(\"token\", data.jwt);\n        dispatch(loginUser(data.user));\n      }\n    });\n  };\n};\nexport const getProfileFetch = () => {\n  return dispatch => {\n    const token = localStorage.token;\n\n    if (token) {\n      return fetch(\"http://localhost:8080/home\", {\n        method: \"GET\",\n        headers: {\n          'Content-Type': 'application/json',\n          Accept: 'application/json',\n          'Authorization': `Bearer ${token}`\n        }\n      }).then(resp => resp.json()).then(data => {\n        if (data.message) {\n          // An error will occur if the token is invalid.\n          // If this happens, you may want to remove the invalid token.\n          localStorage.removeItem(\"token\");\n        } else {\n          dispatch(loginUser(data.user));\n        }\n      });\n    }\n  };\n};","map":{"version":3,"sources":["/Users/apple/Desktop/JavaCloudApplication/Joole_web/src/actions/auth.js"],"names":["axios","actionTypes","userPostFetch","user","dispatch","fetch","method","headers","Accept","body","JSON","stringify","then","resp","json","data","message","localStorage","setItem","jwt","loginUser","authStart","type","AUTH_START","authSuccess","token","userId","AUTH_SUCCESS","idToken","authFail","error","AUTH_FAIL","logout","removeItem","AUTH_LOGOUT","checkAuthTimeout","expirationTime","setTimeout","auth","username","password","isSignup","authData","returnSecureToken","url","post","response","console","log","expirationDate","Date","getTime","expiresIn","localId","catch","err","authCheckState","getItem","userLoginFetch","getProfileFetch"],"mappings":"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","sourcesContent":["import axios from 'axios';\n\nimport * as actionTypes from './actionTypes';\n\nexport const userPostFetch = user => {\n    return dispatch => {\n        return fetch(\"http://localhost:8080/register\", {\n            method: \"POST\",\n            headers: {\n                'Content-Type': 'application/json',\n                Accept: 'application/json',\n            },\n            body: JSON.stringify({ user })\n        })\n            .then(resp => resp.json())\n            .then(data => {\n                if (data.message) {\n                } else {\n                    localStorage.setItem(\"token\", data.jwt)\n                    dispatch(loginUser(data.user))\n                }\n            })\n    }\n}\n\nexport const authStart = () => {\n    return {\n        type: actionTypes.AUTH_START\n    };\n};\n\nexport const authSuccess = (token, userId) => {\n    return {\n        type: actionTypes.AUTH_SUCCESS,\n        idToken: token,\n        userId: userId\n    };\n};\n\nexport const authFail = (error) => {\n    return {\n        type: actionTypes.AUTH_FAIL,\n        error: error\n    };\n};\n\nexport const logout = () => {\n    localStorage.removeItem('token');\n    localStorage.removeItem('expirationDate');\n    localStorage.removeItem('userId');\n    return {\n        type: actionTypes.AUTH_LOGOUT\n    };\n};\n\nexport const checkAuthTimeout = (expirationTime) => {\n    return dispatch => {\n        setTimeout(() => {\n            dispatch(logout());\n        }, expirationTime * 1000);\n    };\n};\n\nexport const auth = (username, password, isSignup) => {\n    return dispatch => {\n        dispatch(authStart());\n        const authData = {\n            username: username,\n            password: password,\n            returnSecureToken: true\n        };\n        let url = 'http://localhost:8080/authenticate';\n        axios.post(url, authData)\n            .then(response => {\n                console.log(response);\n                const expirationDate = new Date(new Date().getTime() + response.data.expiresIn * 1000);\n                localStorage.setItem('token', response.data.idToken);\n                localStorage.setItem('expirationDate', expirationDate);\n                localStorage.setItem('userId', response.data.localId);\n                dispatch(authSuccess(response.data.idToken, response.data.localId));\n                dispatch(checkAuthTimeout(response.data.expiresIn));\n            })\n            .catch(err => {\n                dispatch(authFail(err.response.data.error));\n            });\n    };\n};\n\n\nexport const authCheckState = () => {\n    return dispatch => {\n        const token = localStorage.getItem('token');\n        if (!token) {\n            dispatch(logout());\n        } else {\n            const expirationDate = new Date(localStorage.getItem('expirationDate'));\n            if (expirationDate <= new Date()) {\n                dispatch(logout());\n            } else {\n                const userId = localStorage.getItem('userId');\n                dispatch(authSuccess(token, userId));\n                dispatch(checkAuthTimeout((expirationDate.getTime() - new Date().getTime()) / 1000 ));\n            }   \n        }\n    };\n};\n\nexport const userLoginFetch = user => {\n    return dispatch => {\n      return fetch(\"http://localhost:8080/login\", {\n        method: \"POST\",\n        headers: {\n          'Content-Type': 'application/json',\n          Accept: 'application/json',\n        },\n        body: JSON.stringify({user})\n      })\n        .then(resp => resp.json())\n        .then(data => {\n          if (data.message) {\n            // Here you should have logic to handle invalid login credentials.\n            // This assumes your Rails API will return a JSON object with a key of\n            // 'message' if there is an error\n          } else {\n            localStorage.setItem(\"token\", data.jwt)\n            dispatch(loginUser(data.user))\n          }\n        })\n    }\n  }\n\n  export const getProfileFetch = () => {\n    return dispatch => {\n      const token = localStorage.token;\n      if (token) {\n        return fetch(\"http://localhost:8080/home\", {\n          method: \"GET\",\n          headers: {\n            'Content-Type': 'application/json',\n            Accept: 'application/json',\n            'Authorization': `Bearer ${token}`\n          }\n        })\n          .then(resp => resp.json())\n          .then(data => {\n            if (data.message) {\n              // An error will occur if the token is invalid.\n              // If this happens, you may want to remove the invalid token.\n              localStorage.removeItem(\"token\")\n            } else {\n              dispatch(loginUser(data.user))\n            }\n          })\n      }\n    }\n  }\n  "]},"metadata":{},"sourceType":"module"}