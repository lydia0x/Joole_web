{"ast":null,"code":"export const userPostFetch = user => {\n  return dispatch => {\n    return fetch(\"http://localhost:8080/register\", {\n      method: \"POST\",\n      headers: {\n        'Content-Type': 'application/json',\n        Accept: 'application/json'\n      },\n      body: JSON.stringify({\n        user\n      })\n    }).then(resp => resp.json()).then(data => {\n      if (data.message) {// Here you should have logic to handle invalid creation of a user.\n        // This assumes your Rails API will return a JSON object with a key of\n        // 'message' if there is an error with creating the user, i.e. invalid username\n      } else {\n        localStorage.setItem(\"token\", data.jwt);\n        dispatch(loginUser(data.user));\n      }\n    });\n  };\n};\n\nconst loginUser = userObj => ({\n  type: 'LOGIN_USER',\n  payload: userObj\n});","map":{"version":3,"sources":["/Users/apple/Desktop/JavaCloudApplication/Joole_web/src/actions/auth.js"],"names":["userPostFetch","user","dispatch","fetch","method","headers","Accept","body","JSON","stringify","then","resp","json","data","message","localStorage","setItem","jwt","loginUser","userObj","type","payload"],"mappings":"AAAA,OAAO,MAAMA,aAAa,GAAGC,IAAI,IAAI;AACjC,SAAOC,QAAQ,IAAI;AACf,WAAOC,KAAK,CAAC,gCAAD,EAAmC;AAC3CC,MAAAA,MAAM,EAAE,MADmC;AAE3CC,MAAAA,OAAO,EAAE;AACL,wBAAgB,kBADX;AAELC,QAAAA,MAAM,EAAE;AAFH,OAFkC;AAM3CC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAER,QAAAA;AAAF,OAAf;AANqC,KAAnC,CAAL,CAQFS,IARE,CAQGC,IAAI,IAAIA,IAAI,CAACC,IAAL,EARX,EASFF,IATE,CASGG,IAAI,IAAI;AACV,UAAIA,IAAI,CAACC,OAAT,EAAkB,CACd;AACA;AACA;AACH,OAJD,MAIO;AACHC,QAAAA,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA8BH,IAAI,CAACI,GAAnC;AACAf,QAAAA,QAAQ,CAACgB,SAAS,CAACL,IAAI,CAACZ,IAAN,CAAV,CAAR;AACH;AACJ,KAlBE,CAAP;AAmBH,GApBD;AAqBH,CAtBM;;AAwBP,MAAMiB,SAAS,GAAGC,OAAO,KAAK;AAC1BC,EAAAA,IAAI,EAAE,YADoB;AAE1BC,EAAAA,OAAO,EAAEF;AAFiB,CAAL,CAAzB","sourcesContent":["export const userPostFetch = user => {\n    return dispatch => {\n        return fetch(\"http://localhost:8080/register\", {\n            method: \"POST\",\n            headers: {\n                'Content-Type': 'application/json',\n                Accept: 'application/json',\n            },\n            body: JSON.stringify({ user })\n        })\n            .then(resp => resp.json())\n            .then(data => {\n                if (data.message) {\n                    // Here you should have logic to handle invalid creation of a user.\n                    // This assumes your Rails API will return a JSON object with a key of\n                    // 'message' if there is an error with creating the user, i.e. invalid username\n                } else {\n                    localStorage.setItem(\"token\", data.jwt)\n                    dispatch(loginUser(data.user))\n                }\n            })\n    }\n}\n\nconst loginUser = userObj => ({\n    type: 'LOGIN_USER',\n    payload: userObj\n})"]},"metadata":{},"sourceType":"module"}